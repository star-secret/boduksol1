

'''
    [Object Oriented Programming] - 객체지향 프로그래밍
        - 객체지향이론
            실제 세계는 사물(객체)로 이루어져 있으며,
            발생하는 모든 사건들은 사물(객체)간의 상호작용이다.

            이 개념을 토대로 프로그래밍 언어 접목 --> 객체지향 프로그래밍

        - 특징(장점)
            1. 코드의 재사용성이 높다. (함수 배울때, 높은 재사용성)
            2. 코드를 관리하기 좋다.(편하다.)
            3. 프로그램의 신뢰성이 높아진다.

        - '클래스'와 '객체'
            1. 클래스는 일종의 설계도(틀)이며,
               객체는 그 설계도를 통해 만들어진 실제 사물
                   갤럭시9 설계도 --> 갤럭시9

            2. 클래스(class)
                - 정의 : 객체(사물)를 정의해 놓은 것(어떠한 객체를 만들 것인지)
                - 용도 : 객체를 생성

            3. 객체(object)
                - 정의 : 실제로 존재하는 것 (사물)
                - 용도 : 클래스에 정의된 대로 사용한다.

        - 객체 / 인스턴스
            1. 인스턴스(instance) : 사례, 경우, 실체
                - 기본적으로는 객체와 같은 의미
                - 문장에서 쓰임에 따라 구분한다.
                    * 클래스(설계도)를 통해 실제로 만들어진 객체를 '인스턴스'라고 한다.

                    갤럭시9은 객체이다.
                    갤럭시9 설계도로 객체를 만들 수 있다.
                    내가 가지고 있는 갤럭시9은 인스턴스이다.

        - 객체의 구성 요소 : 속성, 기능
            (속성 : 갤럭시 9의 색상 등 / 기능 : 갤럭시9으로 사진을 찍는다.)

            1. 객체는 클래스에서 정의한 다수의 속성과 기능을 가질 수 있다.
            2. 속성 = 변수
            3. 기능 = 함수

        - 클래스를 비유할 때
            붕어빵 틀(클래스) / 만들어진 붕어빵(객체)
            자동차 공장(클래스) / 출고된 자동차(객체)
'''
print("[OOP]")

'''
1. 클래스(설계도/틀)는 속성(변수)를 정의하거나, 기능(함수)를 정의 할 수 있다.
    > 함수와 마찬가지로 클래스도 작성해놓기만하면 프로그램 수행에 영향이 없다.
    > 객체(인스턴스)를 생성한 뒤부터 클래스에 작성된 코드가 효력이 발생할 수 있다.

2. 클래스 안에 정의(def)된 함수는 '메서드(method)'라고도 부른다.
    > 메서드를 만들 때는 반드시 최소 하나의 매개변수가 필요하다. (파이썬 규칙)
    > 나 자기 자신을 의미하는 self라는 이름으로 한다. (꼭 self가 아니어도 되지만 이렇게 한다.)
'''

class Car : # class 클래스명:
    def power_on(self):
        print("부릉부릉")
        self.power = True # self에는 bmw(이 메서드를 호출한 인스턴스)가 대입
        # bmw인스턴스에 power라는 변수(속성)이 추가 됐다. (변수 생성 코드)
        self.drive() # self=bmw 였기 때문에 bmw.drive()와 같다. 

    def drive(self):
        print("주행시작!")

# 인스턴스 생성
bmw = Car() # 변수명 = 클래스명() --> Car 클래스의 객체(인스턴스) 생성
# ~~~관련 함수 --> 문자열.함수() , 리스트.함수()
bmw.power_on() # 클래스에 정의된 함수 호출 
print("bmw의 시동 여부 :", bmw.power)

# 클래스에 여러 속성/기능을 정의 해두고, 인스턴스라는 하나의 단위로 묶어서 다루겠다.

tico = Car() # 위에 있는 bmw와는 별개의 새로운 인스턴스가 생성
tico.drive()
tico.power = "시동켜짐"
print("tico의 시동 여부 :", tico.power) # 오류! tico는 power 변수를 만드는 코드가 없다. 









        
            
